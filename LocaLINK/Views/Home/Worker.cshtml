@model IEnumerable<LocaLINK.Booking>

@{
    ViewBag.Title = "Worker";
}


<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
    <style>
        #map {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
        }


        #detail-overlay {
            width: 600px;
            background-color: rgba(255, 255, 255, 0.8);
            padding: 10px;
            box-sizing: border-box;
            display: flex;
            justify-content: center;
            align-items: center;
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1000;
            border-radius: 20px;
            flex-wrap: wrap;
        }

        #detail-content {
            flex: 1;
            text-align: left;
        }

        #detail-arrows {
            flex: 0 0 auto;
        }

        .popup-btn {
            cursor: pointer;
            margin-top: 5px;
            background-color: #007bff;
            color: white;
            border: none;
            width: 100%;
            padding: 5px 10px;
            border-radius: 5px;
            font-weight: bold;
        }

        #listofbookings {
            position: fixed;
            top: 0;
            left: 0;
            width: 350px; /* Adjust width as needed */
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            padding: 20px;
            overflow-y: auto;
            box-sizing: border-box;
            z-index: 1000;
        }

        .booking-item {
            cursor: pointer;
            transition: background-color 0.3s ease;
            padding: 10px;
        }

        .booking-item:hover {
            background-color: #ddd;
        }

        #but {
            padding: 3px;
            background-color: #63c5da;
            width: 100%;
        }
        h4 {
            text-align:center;
        }
    </style>
</head>

<body>

    <section data-bs-version="5.1" class="menu menu2 cid-uadY7arbeN" once="menu" id="menu-5-uadY7arbeN">

        <nav class="navbar navbar-dropdown navbar-fixed-top navbar-expand-lg">
            <div class="container">
                <div class="navbar-brand">
                    <span class="navbar-caption-wrap"><a class="navbar-caption text-black display-4">LOCALink</a></span>
                </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-bs-toggle="collapse" data-target="#navbarSupportedContent" data-bs-target="#navbarSupportedContent" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
                    <div class="hamburger">
                        <span></span>
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </button>

                
                  
                        <div class="collapse navbar-collapse" id="navbarSupportedContent">
                            <ul class="navbar-nav nav-dropdown" data-app-modern-menu="true">
                                <li class="nav-item">
                                    <a class="nav-link link text-black display-4" href="/Home/Worker">Orders</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link link text-black display-4" href="#listofbookings">Customers</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link link text-black display-4" href="/Home/ProgressWorker">Progress</a>
                                </li>
                            </ul>
                        </div>
                        <ul class="navbar-nav">
                            <li class="nav-item dropdown">
                                <div class="navbar-buttons mbr-section-btn">
                                    <button class="btn btn-primary display-4" type="button" id="profileDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-circle" viewBox="0 0 16 16">
                                            <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0" />
                                            <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8m8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1" />
                                        </svg>
                                        <span style="margin-left: 10px;">@User.Identity.Name</span>
                                    </button>
                                    <div class="dropdown-menu" aria-labelledby="dropdown-278">
                                        <a class="text-black dropdown-item display-4" href="/Home/MyProfile">Edit Profile</a>
                                        <a class="text-black dropdown-item display-4" onclick="logoutConfirmation()">Sign Out<br></a>
                                    </div>
                                </div>
                            </li>
                        </ul>
               

            </div>
        </nav>
    </section>

    @if (!string.IsNullOrEmpty(ViewBag.SuccessMessage))
    {
        <div class="alert alert-success" role="alert">
            @ViewBag.SuccessMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @ViewBag.ErrorMessage
        </div>
    }
    <div id="map"></div>
    @using (Html.BeginForm())
    {
        <div id="detail-overlay">
            <div id="detail-content"></div>
            <button type="button" class="popup-btn" onclick="bookingConfirmation()">Accept Request</button>
            <input type="hidden" id="bookingIdInput" name="id" value="" />
            <input type="submit" id="submitButton" style="display: none;" />
            <input type="hidden" id="workerIdInput" name="worker_id" value="" />
        </div>
        <div id="listofbookings" style="display: none; left: -300px;">
            <!-- Step 1: Initially hidden and positioned to the left -->
            <img src="/assets/images/423422484_742093807859588_180377772690653095_n (1).png" alt="LOCALink"> <br />
            <h4>List of Customers</h4>
            @foreach (var booking in Model)
            {
                if (booking.status == 0)
                {
                    <button id="but"></button>
                    <div class="booking-item" data-booking-id="@booking.booking_id" onclick="bookingConfirmation()">
                        <b>Location:</b> @booking.location<br>
                        <b>Customer Name:</b> @booking.name<br>
                        <b>Date:</b> @(booking.booking_date != null ? DateTime.Parse(booking.booking_date.ToString()).ToString("dd/MM/yyyy") : "")<br>
                        <b>Price:</b> @booking.total_price<br>
                        <b>Phone Number:</b> @booking.contact<br>
                        <b>Service:</b> @booking.service<br><br>
                    </div>
                }
            }
        </div>

    }
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>

    <script>
    var currentBookingIndex = 0;
    var map;

    function updateDetailContent(index, bookings) {
        var content = "";
        var booking = bookings[index];
        var bookingDate = new Date(Date.parse(booking.booking_date));
        var formattedDate = bookingDate.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });

        content += "<input id='booking_id' type='hidden' name='id' value='" + booking.booking_id + "'>" +
            "<b>Location:</b> " + booking.location + "<br>" +
            "<b>Customer Name: </b>" + booking.name + "<br>" +
            "<b>Date: </b>" + formattedDate + "<br>" +
            "<b>Price:</b> " + booking.total_price + "<br>" +
            "<b>Service:</b> " + booking.service + "<br>" +
            "<b>Phone Number: </b>" + booking.contact + "<br><br>";

        document.getElementById('detail-content').innerHTML = content;
    }
    function initmap(bookings) {
        map = new L.Map('map');
        var osmUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
        var osmAttrib = 'Map data © <a href="https://openstreetmap.org">OpenStreetMap</a> contributors';
        var osm = new L.TileLayer(osmUrl, { minZoom: 2, maxZoom: 19, attribution: osmAttrib });
        map.setView(new L.LatLng(12.8797, 121.7740), 6);

        map.addLayer(osm);

        // Filter bookings with status "Pending" or 0
        var pendingBookings = bookings.filter(function(booking) {
            return booking.status === "Pending" || booking.status === 0;
        });

        pendingBookings.forEach(function (booking, index) {
            var popupContent = "<b>Price:</b> " + booking.total_price;

            var marker = L.marker([booking.latitude, booking.longitude]).addTo(map);
            marker.bindPopup(popupContent, { autoClose: false });

            marker.on('click', function () {
                currentBookingIndex = index;
                updateDetailContent(index, pendingBookings);
            });
        });

        // If there are no pending bookings, display a message
        if (pendingBookings.length === 0) {
            document.getElementById('detail-content').innerHTML = "No pending bookings";
        } else {
            updateDetailContent(0, pendingBookings);
        }
    }


        document.addEventListener('DOMContentLoaded', function () {
        var bookings = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model, new Newtonsoft.Json.JsonSerializerSettings {
            ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
        }));

        // Add event listener to the customer nav bar button
        document.querySelector('.nav-link[href="#listofbookings"]').addEventListener('click', function (event) {
            event.preventDefault();
            var listofbookings = document.getElementById('listofbookings');
            if (listofbookings.style.display === 'none') {
                listofbookings.style.display = 'block';
                listofbookings.style.left = '0';
            } else {
                listofbookings.style.display = 'none';
                listofbookings.style.left = '-300px';
            }
        });

        initmap(bookings);
    });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function bookingConfirmation() {
            Swal.fire({
                title: 'Booking Confirmation',
                text: "Are you sure you want to accept?",
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, accept'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Set the booking ID to the hidden input field
                    var bookingId = document.getElementById('booking_id').value;
                    var currentUserId = '@User.Identity.Name';
                    document.getElementById('bookingIdInput').value = bookingId;
                    document.getElementById('workerIdInput').value = currentUserId; // Set the worker_id
                    // Click the submit button
                    document.getElementById('submitButton').click();
                }
            });
        }
    </script>

</body>

</html>


