@model LocaLINK.User_Account

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<!DOCTYPE html>
<html class="{ 'theme-dark': dark }" x-data="data()" lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
</head>
<body>
    <div class="flex flex-col flex-1 w-full">
        <main class="h-full overflow-y-auto" id="dashboard">
            <div class="container px-6 mx-auto grid">
                <h2 class="my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200">
                    Manage Accounts
                </h2>
                <!-- CTA -->
                <a class="flex items-center justify-between p-4 mb-8 text-sm font-semibold text-purple-100 bg-purple-600 rounded-lg shadow-md focus:outline-none focus:shadow-outline-purple"
                   href="">
                    <div class="flex items-center">
                        <svg class="w-5 h-5 mr-2"
                             fill="currentColor"
                             viewBox="0 0 20 20">
                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                        </svg>
                        <span>Edit Accounts</span>
                    </div>
                </a>
                <!-- New Table -->
                <div class="w-full overflow-hidden rounded-lg shadow-xs">
                    <div class="w-full overflow-x-auto">
                        @if (TempData["Message"] != null)
                        {
                            <div class="alert alert-success" style="background-color: #d1e7dd; color: #155724; border-color: #c3e6cb; padding: 5px">
                                @TempData["Message"]
                            </div>
                        }
                        @using (Html.BeginForm())
                        {
                            @Html.AntiForgeryToken()
                            
                            <div class="px-4 py-3 mb-8 bg-white rounded-lg shadow-md dark:bg-gray-800">

                                <label class="block text-sm" hidden>
                                    @Html.EditorFor(model => model.id, new { htmlAttributes = new { @class = "block w-full mt-1 text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input", type = "hidden" } })
                                    @Html.ValidationMessageFor(model => model.id, "", new { @class = "text-danger" })
                                </label>
                                <label class="block text-sm">
                                    <span class="text-gray-700 dark:text-gray-400">Email</span>
                                    @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "block w-full mt-1 text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input", placeholder = "Email", required = "required", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
                                </label>
                                <label class="block text-sm" hidden>
                                    @Html.EditorFor(model => model.userId, new { htmlAttributes = new { @class = "block w-full mt-1 text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input", type = "hidden" } })
                                    @Html.ValidationMessageFor(model => model.userId, "", new { @class = "text-danger" })
                                </label>
                                <label class="block text-sm">
                                    <span class="text-gray-700 dark:text-gray-400">Username</span>
                                    @Html.EditorFor(model => model.username, new { htmlAttributes = new { @class = "block w-full mt-1 text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input", placeholder = "Username", required = "required"} })
                                    @Html.ValidationMessageFor(model => model.username, "", new { @class = "text-danger" })
                                </label>
                                <label class="block text-sm">
                                    <span class="text-gray-700 dark:text-gray-400">Password</span>
                                    @Html.EditorFor(model => model.password, new { htmlAttributes = new { @class = "block w-full mt-1 text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input", placeholder = "Password", required = "required" } })
                                    @Html.ValidationMessageFor(model => model.password, "", new { @class = "text-danger" })
                                </label>
                                <label class="block text-sm" hidden>
                                    @Html.EditorFor(model => model.roleID, new { htmlAttributes = new { @class = "block w-full mt-1 text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input", type = "hidden" } })
                                    @Html.ValidationMessageFor(model => model.roleID, "", new { @class = "text-danger" })
                                </label>
                                <label class="block text-sm" hidden>
                                    @Html.EditorFor(model => model.date_created, new { htmlAttributes = new { @class = "block w-full mt-1 text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input", type = "hidden" } })
                                    @Html.ValidationMessageFor(model => model.date_created, "", new { @class = "text-danger" })
                                </label>
                                <label class="block text-sm" hidden>
                                    @Html.EditorFor(model => model.code, new { htmlAttributes = new { @class = "block w-full mt-1 text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input", type = "hidden" } })
                                    @Html.ValidationMessageFor(model => model.code, "", new { @class = "text-danger" })
                                </label>
                                <label class="block text-sm">
                                    <span class="text-gray-700 dark:text-gray-400">Date Modified</span>
                                    @Html.EditorFor(model => model.date_modified, new { htmlAttributes = new { @class = "block w-full mt-1 text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input", placeholder = "Date Now", required = "required", type = "date", @readonly = "readonly", @Value = DateTime.Now.ToString("yyyy-MM-dd") } })
                                    @Html.ValidationMessageFor(model => model.date_modified, "", new { @class = "text-danger" })
                                </label>
                                <label class="block mt-4 text-sm">Status</label>
                                @Html.DropDownListFor(model => model.status, new SelectList(new List<SelectListItem>
                                {
                                    new SelectListItem { Text = "Active", Value = "1" },
                                    new SelectListItem { Text = "Inactive", Value = "0" }
                                }, "Value", "Text"), "Select Status", new { @class = "block w-full mt-1 text-sm dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 form-select focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray" })
                                    @Html.ValidationMessageFor(model => model.status, "", new { @class = "text-danger" })
                                <br />
                                <button class="px-4 py-2 text-sm font-medium leading-5 text-white transition-colors duration-150 bg-purple-600 border border-transparent rounded-lg active:bg-purple-600 hover:bg-purple-700 focus:outline-none focus:shadow-outline-purple" type="button" onclick="editConfirmation()" >
                                    Save
                                </button>
                                <input type="hidden" id="userinput" name="id" value="" />
                                <input type="submit" id="submitButton" style="display: none;" />
                            </div>

                        }
                    </div>
                </div>
            </div>
        </main>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
    function editConfirmation() {
        Swal.fire({
            title: 'Update Confirmation',
            text: "Are you sure you want to update this account?",
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, confirm'
        }).then((result) => {
            if (result.isConfirmed) {
                // Set the user ID to the hidden input field
                var user = document.getElementById('id').value;
                document.getElementById('userinput').value = user;
                // Click the submit button
                document.getElementById('submitButton').click();
            }
        });
    }
    </script>



</body>
</html>
